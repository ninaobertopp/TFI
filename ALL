package TCE_TFI;
import HAL.GridsAndAgents.AgentGrid2D;
import HAL.GridsAndAgents.AgentSQ2Dunstackable;
import HAL.GridsAndAgents.PDEGrid2D;
import HAL.Gui.*;
import HAL.Rand;
import HAL.Tools.FileIO;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import static TCE_TFI.gridLattice.*;
import static HAL.Util.*;

//////////////
////LOG//////
/////////////
//02/25/2025 Added Chemo-Therapy

//////////////
////TO-DO////
/////////////
//Turn in vitro to in vivo:

//Start with higher number tumor cells
//What is the ratio of Leukemic Blast Cells to T cells in in bone marrow of ALL patient?
//  Blast cells in the bone marrow are typically between 25 and 95% in patients with ALL.
//      Source: Emadi, A., & York Law, J. (2023). Acute lymphoblastic leukemia (ALL). In Merck Manual (Professional Edition). Merck & Co. https://www.merckmanuals.com/professional/hematology-and-oncology/leukemias/acute-lymphoblastic-leukemia-all
//  31%
//      Mahmood, Khalid, Muhammad Ubaid, and Syeda Taliya Rizvi. "Multiple Osteolytic Lesions Causing Hypercalcemia: A Rare Presentation of Acute Lymphoblastic Leukemia." Case Reports in Medicine, vol. 2017, 2017, Article 2347810. Wiley Online Library, https://doi.org/10.1155/2017/2347810.
//
// Start with a mix of bystander TIL (inactive T cells); active Tcells and exhausted T cells
// Physiological BM it's 2.5% CD8 --> find out in ALL BM
//
// Active T cells different amount of PD-1
//
// Blood vessels
//
// Recruitment of T cells from blood vessels
//
// TCE responds according to in vivo paper
//
// Add Tregs
// 9.6% of CD4 in ALL-BM are Tregs, ; what's the CD4/CD8 ratio? --> 1:1 in physiological setting


//////////////
//GRID CLASS//
//////////////
class gridLattice extends AgentGrid2D<agentLattice> {
    public static int timeStep = 0; // initial timestep
    public final static double STEPS = (28*24.0);
    public final static int ITERATIONS = 10; // number of times the model will run
    public static boolean VISUALS = true; // turns on/off visualizations for the model
    public final static int activeTcell = 1; // active cd8 t-cells
    public final static int exhaustedTcells = 4; // exhausted cd8 t-cell
    public final static int Tumor = 2; // tumor cell
    public final static int PD_L1_Tumor = 3; // New PD-L1+ Tumor cell type
    public final static int inactiveTcell = 6; // inactive tcells
    public final static int Tregs = 5;
    public int totalTumorCells = 0;     // Tracks all tumor cells
    public int totalPDL1TumorCells = 0; // Tracks PD-L1+ tumor cells
    public double currentPDL1Fraction = 0;
    public final int InitactiveTcell =1; //IN VITRO initial number of active tcells
    public final int InitinactiveTcells = 20; //IN VITRO initial number of inactive tcells
    public final int InitexhaustedTcells = 0; // initial number of exhausted tcells
    final static double Tumor_PROLIFERATION_PROB = 1.0 / 24; //cancer cell division rate
    final static double Tumor_DEATH_PROB = 1.0 / 72; // cancer cell apoptosis rate
    public double T_CELL_DEATH_RATE = 1.0 / 24; // tcell death rate - used for exhausted tcells
    boolean TCE_ON = false; // switching on tce therapy
    double[] TCE_start = {0}; //{-1, 13}; {-1, 5, 11, 17, 23}; {0, 6, 12, 18, 24}
    double[] TCE_Duration = {7}; //{8, 8}; {4, 4, 4, 4, 4}; {3, 3, 3, 3, 3}
    public static boolean chemo_on = true;// Chemotherapy switch
    public static double[] chemo_start_times = {}; // Multiple chemo starts (e.g., day 1, 10, and 20)
    public static double chemo_duration = 0; // Each cycle lasts 1 day
    public static int chemo_effect_remaining = 0; // Tracks post-chemo effect


    public Rand rn = new Rand();

    FileIO output;

    ////////////////////
    //GRID CONSTRUCTOR//
    ////////////////////
    public gridLattice(int xDim, int yDim, String outFileName) {
        //Calls the constructor of the parent class (AgentGrid2D).
        super(xDim, yDim, agentLattice.class, true, true);
        output = new FileIO(outFileName, "w");
        output.Write("Time,TCELLS, EXTCELLS, TUMOR, Inactive Tcells" + "\n");
        double totalArea = xDim * yDim;
        // Initialize Tumor cells: 30% of the grid area
        int numTumorCells = (int)(totalArea * 0.3); // 30% of grid
        int initialPDL1Cells = (int) (numTumorCells * 0.02); // 2% start as PD-L1+ Tumor


        for (int i = 0; i < numTumorCells; i++) {
            int xinit, yinit;
            do {
                xinit = rn.Int(xDim);
                yinit = rn.Int(yDim);
            } while (PopAt(xinit, yinit) > 0);

            agentLattice c = NewAgentSQ(xinit, yinit);

            if (i < initialPDL1Cells) { // Assign first 2% as PD-L1+ Tumors
                c.type = PD_L1_Tumor;
                totalPDL1TumorCells++;
            } else {
                c.type = Tumor;
            }

            totalTumorCells++; // Count both Tumor and PD-L1+ Tumor
            c.SetCellColor();
        }
        // Initialize T cells: 2.5% of the grid area
        int numTCells = (int)(totalArea * 0.025); // 2.5% of grid area
        int numInactiveTCells = (int)(numTCells * 0.80);
        int numActiveTCells = (int)(numTCells * 0.10);
        int numExhaustedTCells = (int)(numTCells * 0.10);
        int numTregs = (int)(numTCells * 0.096);

        // Place inactive T cells (50% of total T cells)
        for (int i = 0; i < numInactiveTCells; i++) {
            int xinit, yinit;
            do {
                xinit = rn.Int(xDim);
                yinit = rn.Int(yDim);
            } while (PopAt(xinit, yinit) > 0); // Ensure no overlap
            agentLattice c = NewAgentSQ(xinit, yinit);
            c.type = inactiveTcell;
            c.SetCellColor();
        }
// Place active T cells (30% of total T cells)
        for (int i = 0; i < numActiveTCells; i++) {
            int xinit, yinit;
            do {
                xinit = rn.Int(xDim);
                yinit = rn.Int(yDim);
            } while (PopAt(xinit, yinit) > 0); // Ensure no overlap
            agentLattice c = NewAgentSQ(xinit, yinit);
            c.type = activeTcell;
            c.SetCellColor();
            // Assign a random PD-1 value between 0 and 5 to each active T cell
            c.pd_1 = rn.Double() * 5;  // Random number between 0 and 5
        }

// Place exhausted T cells (20% of total T cells)
        for (int i = 0; i < numExhaustedTCells; i++) {
            int xinit, yinit;
            do {
                xinit = rn.Int(xDim);
                yinit = rn.Int(yDim);
            } while (PopAt(xinit, yinit) > 0); // Ensure no overlap
            agentLattice c = NewAgentSQ(xinit, yinit);
            c.type = exhaustedTcells;
            c.SetCellColor();
        }

        // Initialize Tregs
        for (int i = 0; i < numTregs; i++) {
            int xinit, yinit;
            do {
                xinit = rn.Int(xDim);
                yinit = rn.Int(yDim);
            } while (PopAt(xinit, yinit) > 0); // Ensure no overlap
            agentLattice c = NewAgentSQ(xinit, yinit);
            c.type = Tregs;
            c.SetCellColor();
        }

//// IN VITRO placing 40 myeloma cells (a type of tumor cell) on the grid while ensuring that no two cells are placed in the same position.
//        for (int i = 0; i < 40; i++) {
//            // ecruitecruit one myeloma cell within 10 grid spaces from the bone
//            int myelomaX, myelomaY;
//            do {
//                //Randomly generate the x and y coordinates for placing the cell.
//                //rn is a random number generator, and Int(xDim) produces a random integer between 0 and xDim - 1 (similarly for yDim).
//                myelomaX = rn.Int(xDim);
//                myelomaY = rn.Int(yDim);
//            }
//            //PopAt(myelomaX, myelomaY): Checks if there is already a cell (or agent) at the randomly chosen coordinates.
//            //The do...while loop ensures that if the chosen position is occupied (PopAt(...) > 0), new random coordinates are generated until an unoccupied position is found.
//            while (PopAt(myelomaX, myelomaY) > 0);
//            //Once an unoccupied position is found, a new instance of agentLattice (representing a cell) is created at the specified grid square (myelomaX, myelomaY) using the NewAgentSQ method.
//            agentLattice c = NewAgentSQ(myelomaX, myelomaY);
//            c.type = Tumor;
//            c.SetCellColor();
//            // !!Place T-cells adjacent to myeloma cells if TCE is on!!
//        }

    }

    ////////////////
    //GRID METHODS//
    ////////////////
    //VISUALIZATION
    public void Draw(UIGrid vis) {
        //Loop through all GRID cells
        for (int x = 0; x < xDim; x++) {
            for (int y = 0; y < yDim; y++) {
                agentLattice drawMe = GetAgent(x, y);
                if (drawMe != null) {
                    vis.SetPix(x, y, drawMe.color);
                } else {
                    //background color
                    vis.SetPix(x, y, RGB256(240, 220, 220));
                }
            }
        }
    }
    //Output numbers of cell populations
    public double[] CellCounts() {
        double[] counts = new double[6];  // Increased array size to store all relevant cell types

        for (agentLattice c : this) {
            if (c.type == activeTcell) {
                counts[0]++;  // Active T cells
            } else if (c.type == exhaustedTcells) {
                counts[1]++;  // Exhausted T cells
            } else if (c.type == Tumor) {
                counts[2]++;  // Regular Tumor cells
            } else if (c.type == PD_L1_Tumor) {
                counts[3]++;  // PD-L1 Tumor cells
            } else if (c.type == inactiveTcell) {
                counts[4]++;  // Inactive T cells
            } else if (c.type == Tregs) {
                counts[5]++;  // ✅ NEW: Treg cells
            }
        }

        // ✅ Debug printout to verify correct counting
        System.out.println("DEBUG: CellCounts -> Active T: " + counts[0] + ", Exhausted T: " + counts[1] +
                ", Tumors: " + counts[2] + ", PD-L1 Tumors: " + counts[3] +
                ", Inactive T: " + counts[4] + ", Tregs: " + counts[5]);

        return counts;
    }


    public void RecordOut(FileIO writeHere, int time, double[] cts) {
        writeHere.Write(time + ",");
        writeHere.WriteDelimit(cts, ",");
        writeHere.Write ("\n");
    }

    public void ModelStep(double timeStep, double day) {
        this.timeStep = (int) timeStep;

        ShuffleAgents(rn);
        for (agentLattice c : this) {
            c.CellStep();
        }

        // ✅ Recalculate tumor counts directly
        totalTumorCells = 0;
        totalPDL1TumorCells = 0;
        for (agentLattice c : this) {
            if (c.type == Tumor) {
                totalTumorCells++;
            } else if (c.type == PD_L1_Tumor) {
                totalPDL1TumorCells++;
            }
        }

        System.out.println("DEBUG: End of Step -> Tumors: " + totalTumorCells + ", PD-L1 Tumors: " + totalPDL1TumorCells);


        if (TCE_ON && timeStep % 24 == 0 && timeStep != 0) {
            System.out.println("DEBUG: Applying tumor conversion for Day " + (timeStep / 24));

            int numConversions = (int) Math.floor(0.0137 * (totalTumorCells + totalPDL1TumorCells));  // 1.37% conversion

            ArrayList<agentLattice> tumorCells = new ArrayList<>();
            for (agentLattice c : this) {
                if (c.type == Tumor) {
                    tumorCells.add(c);
                }
            }

            int conversionsDone = 0;
            while (conversionsDone < numConversions && !tumorCells.isEmpty()) {
                int index = rn.Int(tumorCells.size()); // Pick random tumor
                agentLattice selected = tumorCells.get(index);
                selected.type = PD_L1_Tumor;  // Convert to PD-L1+ Tumor
                selected.SetCellColor();

                // ✅ Directly update counts without a separate function
                totalPDL1TumorCells++;
                totalTumorCells--;

                tumorCells.remove(index);
                conversionsDone++;
            }

            System.out.println("DEBUG: Converted " + conversionsDone + " tumors to PD-L1.");
            System.out.println("After Conversion: Total Tumors = " + totalTumorCells + ", PD-L1 Tumors = " + totalPDL1TumorCells);
        }

    }




        ////////
    //MAIN//
    ////////
    public static void main (String[]args) throws IOException {
        // Print statement to check probability and condition
        int j = 0;
        //TIME STAMP
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd_HH_SS");
        java.util.Date now = new java.util.Date();
        String date_time = dateFormat.format(now);
        int numIterations = ITERATIONS;
        System.out.println("Starting simulation for " + numIterations + " iterations...");
        while (j < numIterations){
            double day=0;
            String save = new String();
            String VASC_ARCH_PATH = new String();
            //GridWindow win = null;
            int xDim = 160;
            int yDim = 150;
            double TIMESTEPS = STEPS;

            // PATHS
            String projPath = "TCE_TFI" ; // place project path here
            String setting_dir = projPath + VASC_ARCH_PATH + save + "/output/" + "/" + date_time + "/";
            // CREATE OUTPUT DIR
            new File(setting_dir).mkdirs();
            String output_dir = setting_dir;
            new File(output_dir).mkdirs();
            // OUTPUT FILES
            // Generate a unique file name using the simulation index and timestamp
            String timestamp = new java.text.SimpleDateFormat("yyyyMMdd_HHmmss").format(new java.util.Date());
            //String path_to_output_file = output_dir.concat("/").concat("CellCounts_Simulation_" + j + "_" + timestamp + ".csv");

            //String path_to_output_file = output_dir.concat("/").concat("CellCounts_" + j).concat(".csv");
            String path_to_output_file = output_dir.concat("/").concat("CellCounts_Simulation_" + j + "_" + System.currentTimeMillis() + ".csv");

            // OUTPUT WINDOW
            UIGrid Cell_vis = new UIGrid(xDim, yDim, 4, 2, 5);
            //UIGrid CXCL9_vis = new UIGrid(xDim, yDim, 4,2,5);
            UIWindow win = new UIWindow("TCE_TFI");
            win.AddCol(0, new UILabel("Cells"));
            win.AddCol(0, Cell_vis);
            win.RunGui();
            GifMaker gm_Cell_vis = new GifMaker(projPath.concat("/").concat("CellVid").concat(".gif"), 100, true);
            // GRID
            gridLattice g = new gridLattice(xDim, yDim, path_to_output_file);
            // Initialize variables to store counts for specific days
            double[] countsOnDay14 = new double[4];
            double[] countsOnDay28 = new double[4];
            // TIME LOOP
            for (int i = 0; i < TIMESTEPS; i++) {
                timeStep = i;
                g.TCE_ON = false;
                for (int k = 0; k < g.TCE_start.length; k++) {
                    if (day >= g.TCE_start[k] && day <= g.TCE_start[k] + g.TCE_Duration[k] - 1) {
                        g.TCE_ON = true;
                        //System.out.println("TCE_ON set to true at day: " + day + ", timeStep: " + timeStep + ", duration index: " + k);
                    }
                }
                // Check if today is the start of any chemo cycle
                for (double start_time : chemo_start_times) {
                    if (day == start_time) {
                        chemo_on = true;
                        chemo_effect_remaining = 48; // Reset chemo effect for this cycle
                        break;
                    }
                }

                // Turn chemo off if the duration is over
                chemo_on = false;
                for (double start_time : chemo_start_times) {
                    if (day >= start_time && day < start_time + chemo_duration) {
                        chemo_on = true;
                        break;
                    }
                }
                // Reduce the effect timer if it is still active
                if (chemo_effect_remaining > 0) {
                    chemo_effect_remaining--; // Count down chemo effect
                }

                if (VISUALS) {
                    win.TickPause(100); //slows or speeds up the video frame rate
                }
                // COUNT CURRENT POPULATION
                double[] cell_count = g.CellCounts();
                //This ensures that the initialization of inactive T cells only occurs at the start of the simulation (i.e., when timeStep is 0).
// IN VITRO               if (timeStep == 0) {
//                    int k = 0;
//                    while (k < g.InitinactiveTcells) {
//                        int xinit = g.rn.Int(xDim);
//                        int yinit = g.rn.Int(yDim);
//                        //g.PopAt(xinit, yinit) checks the population at the given coordinates.
//                        // If the position is occupied (i.e., population is greater than 0), new coordinates are generated.
//                        while (g.PopAt(xinit, yinit) > 0) {
//                            xinit = g.rn.Int(xDim);
//                            yinit = g.rn.Int(yDim);
//                        }
//                        // Once xinit and yinit are within (0,0) and (xDim,yDim), place agent.
//                        agentLattice c = g.NewAgentSQ(xinit, yinit);
//                        c.type = inactiveTcell;
//                        c.SetCellColor();
//                        k++;
//                    }
//                }
//
//  IN VITRO              if (timeStep == 0) {
//                    int k = 0;
//                    while (k < g.InitactiveTcell) {
//                        int xinit = g.rn.Int(xDim);
//                        int yinit = g.rn.Int(yDim);
//                        //g.PopAt(xinit, yinit) checks the population at the given coordinates.
//                        // If the position is occupied (i.e., population is greater than 0), new coordinates are generated.
//                        while (g.PopAt(xinit, yinit) > 0) {
//                            xinit = g.rn.Int(xDim);
//                            yinit = g.rn.Int(yDim);
//                        }
//                        // Once xinit and yinit are within (0,0) and (xDim,yDim), place agent.
//                        agentLattice c = g.NewAgentSQ(xinit, yinit);
//                        c.type = activeTcell;
//                        c.SetCellColor();
//                        k++;
//                    }
//                }


                g.ModelStep(timeStep, day);
                // GRAPHICAL OUTPUT
                if (VISUALS) {
                    g.Draw(Cell_vis);
                }
                // Check and record counts for Day 14 and Day 28
                if (i == 14 * 24) { // Day 14
                    countsOnDay14 = cell_count;
                } else if (i == 28 * 24) { // Day 28
                    countsOnDay28 = cell_count;
                }
                // OTHER OUTPUT
                if (i % 24.0 == 0) {
                    System.out.println("Day " + day);
                    g.RecordOut(g.output, (int) day, cell_count);
                    day+= 1;

                    //System.out.println("TCE_start.length: " + g.TCE_start.length);
                    if (g.TCE_ON == true){
                        System.out.println("TCE_ON = true");
                    }
                    if (g.TCE_ON == false){
                        System.out.println("TCE_ON = false");
                    }

                    if (g.chemo_on == true){
                        System.out.println("chemo_on = true");
                    }
                    if (g.chemo_on == false){
                        System.out.println("chemo_on = false");
                    }
                }
            }

            // Print the counts for Day 14 and Day 28
            System.out.println("Counts on Day 14: Tumor = " + countsOnDay14[2] + ", Active T-cells = " + countsOnDay14[0] +", Inactive T-cells = " + countsOnDay14[3] + ", exhausted T-cells = " + countsOnDay14[1]);
            System.out.println("Counts on Day 28: Tumor = " + countsOnDay28[2] + ", Active T-cells = " + countsOnDay28[0] +", Inactive T-cells = " + countsOnDay28[3] + ", exhausted T-cells = " + countsOnDay28[1]);
            g.output.Close();
            win.Close();
            gm_Cell_vis.Close();
            if (j < numIterations){
                System.out.println("Current Iteration: " + j);}
            j++;
        }
    }
}

//////////////
//CELL CLASS//
//////////////
class agentLattice extends AgentSQ2Dunstackable<gridLattice> {
    public int type; // type of cell
    int color; // color of each cell for visualization
    double pd_1 = 0; // pd_1 for tcells
    double tcellKills = 0; // Track T cell kills per step
    double tcellAge = 0; // used for tracking the age of a tcell
    double hours_since_kill = 0; // hours since a tcell last killed a tumor cell
    double hours_since_division = 0; //days since the Tcell has divided
    ////////////////
    //CELL METHODS//
    ////////////////
    final public static int tcell = RGB256(10, 200, 150); //tcell color
    final public static int exhausted = RGB256(200, 50, 250); //exhausted tcell color
    final public static int cancer = RGB256(47, 32, 66); // tumor cell color
    final public static int inactivetcell = RGB256(255, 165, 0);
    final public static int treg = RGB256(128, 0, 32);
    final public static int pd_l1_tumor = RGB256(128, 128, 128); // Red for PD-L1+ tumors

    public static int CategorialColor(int index) {
        switch (index) {
            case activeTcell:
                return tcell;
            case exhaustedTcells:
                return exhausted;
            case Tumor:
                return cancer;
            case PD_L1_Tumor:  // Add PD-L1+ Tumor color
                return pd_l1_tumor;
            case inactiveTcell:
                return inactivetcell;
            case Tregs:
                return treg;
            default:
                throw new IllegalArgumentException("index outside color category range index: " + index);
        }
    }

    void SetCellColor() {
        color = CategorialColor((int) Math.round(0 + type));
    }

    void Tcell_Kill() {
        if (type == Tumor) {
            if (G.totalTumorCells > 0) { // Prevent negative count
                G.totalTumorCells--;
            }
        } else if (type == PD_L1_Tumor) {
            if (G.totalPDL1TumorCells > 0) { // Prevent negative count
                G.totalPDL1TumorCells--;
            }
        }
        this.Dispose();
    }


    void CellStep() {
        if (type == inactiveTcell) {
            boolean agedDeath = false; // Track if the T cell is aged and should die
            this.tcellAge += 1;

            if (G.TCE_ON) {
                this.type = activeTcell;
                this.SetCellColor(); // Update cell color after type change
            }
            for (int run = 0; run < 3; run++) {
                double rn_BirthDeath = G.rn.Double();
                //double pdiv = G.T_CELL_DIV_RATE;
                int[] movdivHood = MooreHood(true); // for division and movement
                int options = MapOccupiedHood(movdivHood); // mapping occupied spots
                int emptyNeighbors = MapEmptyHood(movdivHood); // mapping empty spots
                if (emptyNeighbors > 0) {
                    int chosenIndex = G.rn.Int(emptyNeighbors); // Randomly choose an empty cell index
                    int chosenCell = movdivHood[chosenIndex]; // Get the chosen empty cell
                    if (G.GetAgent(chosenCell) == null) { // Check if the chosen cell is still empty
                        MoveSQ(chosenCell);
                    }
                }
                if (agedDeath) {
                    break;
                }
            }
        }
        if (type == exhaustedTcells) {
            this.SetCellColor();
            int[] movdivHood = MooreHood(true); // for division and movement
            int emptyNeighbors = MapEmptyHood(movdivHood); // mapping empty spots
            double rn_BirthDeath = G.rn.Double();
            double pdiv = G.T_CELL_DEATH_RATE;
            if (rn_BirthDeath < ProbScale(pdiv, 1 / 24)) { // scaling probability that an even that occurs once every 24 hours will occur any given hour
                this.Dispose();
            }
            //Define the percentage of cells to turn into active T cells
            double activationProbability = 0.0005; // For example, 30% chance
            if (G.TCE_ON) {
                // Generate a random number between 0 and 1
                double randomNumber = Math.random();

                // Only turn into activeTcell if the random number is less than the activationProbability
                if (randomNumber < activationProbability) {
                    this.type = activeTcell;
                    this.SetCellColor(); // Update cell color after type change
                    this.pd_1 = 0;
                }
            }
            if (emptyNeighbors > 0) {
                int chosenIndex = G.rn.Int(emptyNeighbors); // Randomly choose an empty cell index
                int chosenCell = movdivHood[chosenIndex]; // Get the chosen empty cell
                if (G.GetAgent(chosenCell) == null) { // Check if the chosen cell is still empty
                    MoveSQ(chosenCell);
                }
            }
        }

        if (type == activeTcell) {
            // Increment T cell age and hours since last kill every hour
            this.tcellAge += 1;
            this.hours_since_kill += 1;
            this.hours_since_division += 1;

            for (int run = 0; run < 3; run++) {
                int[] movdivHood = MooreHood(true); // For division and movement
                int options = MapOccupiedHood(movdivHood); // Mapping occupied spots
                int emptyNeighbors = MapEmptyHood(movdivHood); // Mapping empty spots

                double treshold = 5;//+Math.random();
                if (this.pd_1 > treshold) {
                    this.type = exhaustedTcells;
                    this.SetCellColor();
                    break;
                } else {
                    // Killing logic
                    for (int j = 0; j < options; j++) {
                        agentLattice target = G.GetAgent(movdivHood[j]); // Store reference

                        if (target != null && (target.type == Tumor || target.type == PD_L1_Tumor) && this.hours_since_kill >= 1) {
                            target.Tcell_Kill();
                            this.tcellKills += 1;
                            if (G.TCE_ON) {
                                this.pd_1 += 1.4;
                            } else {
                                this.pd_1 += 0.7;
                            }
                            this.hours_since_kill = 0; // Reset kill timer
                            // If T cell kills a PD-L1 tumor, turn into exhausted T cell**
                            if (target.type == PD_L1_Tumor) {
                                this.type = exhaustedTcells;
                                this.SetCellColor(); // Update the color
                            }
                            // Division logic
                            double divisionProb = 0.8; // Example division probability
                            // Prevent proliferation if chemo is on or its effect is still active (48h after onset)
                            if (this.G.chemo_effect_remaining == 0 && G.rn.Double() < divisionProb){
                                if (emptyNeighbors > 0) {
                                    for (int i = 0; i < emptyNeighbors; i++) {
                                        int chosenIndex = G.rn.Int(emptyNeighbors); // Randomly choose an empty cell index
                                        int chosenCell = movdivHood[chosenIndex];
//                                    Get the chosen empty cell
                                        if (G.GetAgent(chosenCell) == null) {
                                            // Check if the chosen cell is still empty
                                            agentLattice child = G.NewAgentSQ(chosenCell);
                                            child.type = activeTcell;
                                            child.SetCellColor();
                                            child.tcellAge = 0;
                                            child.pd_1 = this.pd_1;
                                            child.hours_since_division = 0;
                                            this.hours_since_division = 0;
                                            if (G.TCE_ON) {
                                                this.type = activeTcell;
                                                this.SetCellColor(); // Update cell color after type change
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                            break; // Exit the inner loop if a tumor cell is encountered
                        }
                    }

                    if (emptyNeighbors > 0) {
                        int chosenIndex = G.rn.Int(emptyNeighbors); // Randomly choose an empty cell index
                        int chosenCell = movdivHood[chosenIndex]; // Get the chosen empty cell
                        if (G.GetAgent(chosenCell) == null) { // Check if the chosen cell is still empty
                            MoveSQ(chosenCell);
                        }
                    }
                }
            }
        }

        if (type == Tregs) {
            int[] movdivHood = MooreHood(true);
            int emptyNeighbors = MapEmptyHood(movdivHood);

            // Suppression of active T cells
            int[] hood = MooreHood(false);
            int options = MapOccupiedHood(hood);
            for (int j = 0; j < options; j++) {
                agentLattice neighbor = G.GetAgent(hood[j]);
                if (neighbor != null && neighbor.type == activeTcell) {
                    if (G.rn.Double() < 0.2) { // 20% chance to turn inactive
                        neighbor.type = exhaustedTcells;
                        neighbor.SetCellColor();
                    }
                }
            }

            // Move Tregs randomly
            if (emptyNeighbors > 0) {
                int chosenIndex = G.rn.Int(emptyNeighbors);
                MoveSQ(movdivHood[chosenIndex]);
            }
        }

        if (type == Tumor) {
            // Default tumor death probability (without chemo)
            double adjusted_death_prob = G.Tumor_DEATH_PROB;
            double adjusted_prolif_prob = G.Tumor_PROLIFERATION_PROB;


            if (G.chemo_on || this.G.chemo_effect_remaining > 0) {
                // Ensure that after 48 hours, viability is 33%
                double target_survival_24h = 0.33; // 33% of tumor cells survive after 48h
                adjusted_death_prob = 1 - Math.pow(target_survival_24h, 1.0 / 48); // Calculate correct hourly death probability

                // Reduce tumor proliferation (e.g., slow division by 50%)
                adjusted_prolif_prob *= 0.0;
            }

            if (G.rn.Double() < ProbScale(adjusted_death_prob,1)) {
                if (G.totalTumorCells > 0) { // Prevents decrementing below 0
                    G.totalTumorCells--;
                }
                Dispose();
                return;
            }

            //STEP 2: division
            if (G.rn.Double() < ProbScale(adjusted_prolif_prob, 1)) {
                int[] divHood = MooreHood(true);
                int emptyNeighbors = MapEmptyHood(divHood);
                //Create new Agent
                if (emptyNeighbors > 0) {
                    agentLattice child = G.NewAgentSQ(divHood[G.rn.Int(emptyNeighbors)]);
                    child.type = this.type;
                    child.SetCellColor();
                }
            }
        }

        if (type == PD_L1_Tumor) {
            // Default tumor death probability (without chemo)
            double adjusted_death_prob_2 = G.Tumor_DEATH_PROB;
            double adjusted_prolif_prob_2 = G.Tumor_PROLIFERATION_PROB;

            if (G.chemo_on || this.G.chemo_effect_remaining > 0) {
                // Ensure that after 48 hours, viability is 33%
                double target_survival_24h = 0.33; // 33% of tumor cells survive after 48h
                adjusted_death_prob_2 = 1 - Math.pow(target_survival_24h, 1.0 / 48); // Calculate correct hourly death probability

                // Reduce tumor proliferation (e.g., slow division by 50%)
                adjusted_prolif_prob_2 *= 0.0;
            }

            if (G.rn.Double() < ProbScale(adjusted_death_prob_2,1)) {
                if (G.totalPDL1TumorCells > 0) { // Prevents decrementing below 0
                    G.totalPDL1TumorCells--;
                }
                Dispose();
                return;
            }

            //STEP 2: division
            if (G.rn.Double() < ProbScale(adjusted_prolif_prob_2, 1)) {
                int[] divHood = MooreHood(true);
                int emptyNeighbors = MapEmptyHood(divHood);
                //Create new Agent
                if (emptyNeighbors > 0) {
                    agentLattice child = G.NewAgentSQ(divHood[G.rn.Int(emptyNeighbors)]);
                    child.type = this.type;
                    child.SetCellColor();
                }
            }
        }



    }
}

