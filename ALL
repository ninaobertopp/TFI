package TCE_TFI;
import HAL.GridsAndAgents.AgentGrid2D;
import HAL.GridsAndAgents.AgentSQ2Dunstackable;
import HAL.Gui.*;
import HAL.Rand;
import HAL.Tools.FileIO;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import static TCE_TFI.gridLattice.*;
import static HAL.Util.*;

//////////////
//GRID CLASS//
//////////////
class gridLattice extends AgentGrid2D<agentLattice> {
    public static int timeStep = 0; // initial timestep
    public final static double STEPS = (84*24.0);
    public static boolean VISUALS = false; // turns on/off visualizations for the model
    public final static int activeTcell = 1; // active cd8 t-cells
    public final static int exhaustedTcells = 4; // exhausted cd8 t-cell
    public double cached_CD8_TIL_count = 0;

    public final static int Tumor = 2; // tumor cell
    //public final static int PD_L1_Tumor = 3; // New PD-L1+ Tumor cell type
    public final static int inactiveTcell = 6; // inactive tcells
    //public final static int Tregs = 5;
    public int totalTumorCells = 0;     // Tracks all tumor cells
    //public int totalPDL1TumorCells = 0; // Tracks PD-L1+ tumor cells
    public int tumorKillsToday = 0;

    final static double Tumor_PROLIFERATION_PROB = 1.0/24.0; //cancer cell division rate; SENSITIVITY ANALYSIS
    final static double Tumor_DEATH_PROB = 1.0 / 132.0; // cancer cell apoptosis rate
    public double T_CELL_DEATH_RATE = 1.0 / 48.0; // tcell death rate - used for exhausted tcells
    boolean TCE_ON; // switching on tce therapy
    double[] TCE_start = {0, 14, 42, 56}; //{0, 6, 12, 18, 24}; {0, 6, 12, 18, 24, 42, 48, 54, 60, 66}; {0, 14, 42, 56}
    double[] TCE_Duration = {7, 7, 7, 7}; //{3, 3, 3, 3, 3}; {3, 3, 3, 3, 3, 3, 3, 3, 3, 3}; {7, 7, 7, 7}
    //    boolean chemo_on = false;// Chemotherapy switch
//    public static double[] chemo_start_times = {1, 8, 15, 22}; // Multiple chemo starts (e.g., day 1, 10, and 20)
//    public static double chemo_duration = 1; // Each cycle lasts 1 day
//    public static int chemo_effect_remaining = 0; // Tracks post-chemo effect
    public Rand rn = new Rand();
    FileIO output;

    ////////////////////
    //GRID CONSTRUCTOR//
    ////////////////////
    public gridLattice(int xDim, int yDim, String outFileName, Rand rng, int seed) {
        //Calls the constructor of the parent class (AgentGrid2D).
        super(xDim, yDim, agentLattice.class, true, true);
        this.rn = rng;
        output = new FileIO(outFileName, "w");
        output.Write("Seed," + seed + "\n");
        output.Write("Day,CD8 TIL,Total Tumor (Tumor + PD-L1),Active T-cells,Exhausted T-cells,Inactive T-cells,Tregs,Tumor,PD-L1 Tumor,PD-L1 %, % Exhausted T-cells, TCE_ON, Chemo_ON\n");


        double totalArea = xDim * yDim;
        // Initialize Tumor cells: 30% of the grid area
        double confluency = 0.5;
        int numTumorCells = (int)(totalArea * confluency * 0.80);
        //int initialPDL1Cells = (int) (numTumorCells * 0.02); // 2% start as PD-L1+ Tumor

        for (int i = 0; i < numTumorCells; i++) {
            int xinit, yinit;
            do {
                xinit = rn.Int(xDim);
                yinit = rn.Int(yDim);
            } while (PopAt(xinit, yinit) > 0);

            agentLattice c = NewAgentSQ(xinit, yinit);

//            if (i < initialPDL1Cells) { // Assign first 2% as PD-L1+ Tumors
//                c.type = PD_L1_Tumor;
//                totalPDL1TumorCells++;
//            } else {
//                c.type = Tumor;
//            }

            c.type = Tumor;
            c.SetCellColor();
            totalTumorCells++; // Count both Tumor and PD-L1+ Tumor
        }
        // Initialize T cells: 5% of the grid area
        int numTCells = (int)(totalArea * confluency * 0.2); // according to
        int numInactiveTCells = numTCells;
        int numActiveTCells = (int) (totalArea * 0.0);
        int numExhaustedTCells = (int) (totalArea * 0.0);
        //int numTregs = (int)(numTCells * 0.096);

        // Place inactive T cells
        for (int i = 0; i < numInactiveTCells; i++) {
            int xinit, yinit;
            do {
                xinit = rn.Int(xDim);
                yinit = rn.Int(yDim);
            } while (PopAt(xinit, yinit) > 0); // Ensure no overlap
            agentLattice c = NewAgentSQ(xinit, yinit);
            c.type = inactiveTcell;
            c.SetCellColor();
        }
// Place active T cells
        for (int i = 0; i < numActiveTCells; i++) {
            int xinit, yinit;
            do {
                xinit = rn.Int(xDim);
                yinit = rn.Int(yDim);
            } while (PopAt(xinit, yinit) > 0); // Ensure no overlap
            agentLattice c = NewAgentSQ(xinit, yinit);
            c.type = activeTcell;
            c.SetCellColor();
            // Assign a random PD-1 value between 0 and 5 to each active T cell
            //c.pd_1 = rn.Double() * 5;  // Random number between 0 and 5
        }

// Place exhausted T cells
        for (int i = 0; i < numExhaustedTCells; i++) {
            int xinit, yinit;
            do {
                xinit = rn.Int(xDim);
                yinit = rn.Int(yDim);
            } while (PopAt(xinit, yinit) > 0); // Ensure no overlap
            agentLattice c = NewAgentSQ(xinit, yinit);
            c.type = exhaustedTcells;
            c.SetCellColor();
        }

        // Initialize Tregs
//        for (int i = 0; i < numTregs; i++) {
//            int xinit, yinit;
//            do {
//                xinit = rn.Int(xDim);
//                yinit = rn.Int(yDim);
//            } while (PopAt(xinit, yinit) > 0); // Ensure no overlap
//            agentLattice c = NewAgentSQ(xinit, yinit);
//            c.type = Tregs;
//            c.SetCellColor();
//        }
    }

    ////////////////
    //GRID METHODS//
    ////////////////
    //VISUALIZATION
    public void Draw(UIGrid vis) {
        //Loop through all GRID cells
        for (int x = 0; x < xDim; x++) {
            for (int y = 0; y < yDim; y++) {
                agentLattice drawMe = GetAgent(x, y);
                if (drawMe != null) {
                    vis.SetPix(x, y, drawMe.color);
                } else {
                    //background color
                    vis.SetPix(x, y, RGB256(240, 220, 220));
                }
            }
        }
    }
    //Output numbers of cell populations
    public double[] CellCounts() {
        double[] counts = new double[10];  // Increased to store % exhausted T cells

        for (agentLattice c : this) {
            if (c.type == activeTcell) {
                counts[2]++;
            } else if (c.type == exhaustedTcells) {
                counts[3]++;
            } else if (c.type == inactiveTcell) {
                counts[4]++;
            } else if (c.type == Tumor) {
                counts[6]++;
            }
        }

        counts[1] = counts[6]; // Total Tumor
        counts[0] = counts[2] + counts[3] + counts[4]; // Total CD8 TILs
        counts[7] = 0; // No PD-L1 tumors
        counts[8] = (counts[1] > 0) ? (counts[7] / counts[1]) * 100.0 : 0.0;  // PD-L1 %

        // ✅ New: % Exhausted T-cells
        double totalT = counts[2] + counts[3] + counts[4];
        counts[9] = (totalT > 0) ? (counts[3] / totalT) * 100.0 : 0.0;

        return counts;
    }


    //public void RecordOut(FileIO writeHere, int time, double[] cts, boolean tceOnFlag, boolean chemoOnFlag)
    public void RecordOut(FileIO writeHere, int time, double[] cts, boolean tceOnFlag) {
        writeHere.Write(time + ",");
        for (int i = 0; i < cts.length; i++) {
            writeHere.Write(String.format("%.2f", cts[i]));
            writeHere.Write(",");
        }
        writeHere.Write((tceOnFlag ? "true" : "false") + ",false\n");
    }




    public void ModelStep(double timeStep, double day) {
        this.timeStep = (int) timeStep;
        cached_CD8_TIL_count = CellCounts()[0];  // Total CD8 T cells (active + exhausted + inactive)

        ShuffleAgents(rn);
        for (agentLattice c : this) {
            c.CellStep();
        }

        // ✅ Recalculate tumor counts directly
        totalTumorCells = 0;
        for (agentLattice c : this) {
            if (c.type == Tumor) {
                totalTumorCells++;
            }
        }

        // ✅ Daily logic (only every 24 hours)
        if (timeStep % 24 == 0 && timeStep != 0) {

            // === Tumor → PD-L1+ conversion ===
//            if (TCE_ON) {
//                int numConversions = (int) Math.floor(2.5 * tumorKillsToday); // SENSITIVITY ANALYSIS
//                ArrayList<agentLattice> tumorCells = new ArrayList<>();
//                for (agentLattice c : this) {
//                    if (c.type == Tumor) {
//                        tumorCells.add(c);
//                    }
//                }
//                int conversionsDone = 0;
//                while (conversionsDone < numConversions && !tumorCells.isEmpty()) {
//                    int index = rn.Int(tumorCells.size());
//                    agentLattice selected = tumorCells.get(index);
//                    selected.type = PD_L1_Tumor;
//                    selected.SetCellColor();
//                    totalPDL1TumorCells++;
//                    totalTumorCells--;
//                    tumorCells.remove(index);
//                    conversionsDone++;
//                }
//            }

            // === T cell reversion (active → inactive) based on half-life decay ===
            if (!TCE_ON) {
                for (agentLattice cell : this) {
                    if (cell.type == activeTcell && cell.hours_since_activation >= 24) {

                        double t_days = cell.hours_since_activation / 24.0;
                        double t_half_days = 210.0 / 24.0;
                        double decayProb = 1.0 - Math.exp(-Math.log(2) * t_days / t_half_days);

                        if (rn.Double() < decayProb) {
                            cell.type = inactiveTcell;
                            cell.SetCellColor(); // preserve PD-1, age, etc.
                        }
                    }
                }
            }
        }

        double[] cellCounts = CellCounts();
        tumorKillsToday = 0;
    }

    ////////
    //MAIN//
    ////////
    public static void main (String[]args) throws IOException {
        for (int run = 0; run < 50; run++) {
            //TIME STAMP
            String simLabel = "TCE_TFI_7_84days";
            java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd_HH_SS");
            java.util.Date now = new java.util.Date();
            String date_time = dateFormat.format(now);

            // LOG SEED
            System.out.println("=== RUN " + run + " | SEED: " + run + " ===");

            double day = 0;
            String save = "";
            String VASC_ARCH_PATH = "";
            //GridWindow win = null;
            int xDim = 160;
            int yDim = 150;
            double TIMESTEPS = STEPS;

            // PATHS
            String projPath = "TCE_TFI"; // place project path here
            String setting_dir = projPath + VASC_ARCH_PATH + save + "/output/" + "/" + date_time + "/";
            // CREATE OUTPUT DIR
            new File(setting_dir).mkdirs();
            String outputFilename = simLabel + "_" + date_time + "_rep" + run + ".csv";
            String path_to_output_file = setting_dir + outputFilename;


              // OUTPUT WINDOW
              UIGrid Cell_vis = new UIGrid(xDim, yDim, 4, 2, 5);
              UIWindow win = new UIWindow("TCE_TFI");
              win.AddCol(0, new UILabel("Cells"));
              win.AddCol(0, Cell_vis);
              UILabel dayLabel = new UILabel("Day: 0");
              UILabel chemoLabel = new UILabel("Chemo: OFF");

              win.AddCol(1, dayLabel);
              win.AddCol(1, chemoLabel);
            if (VISUALS) {
                win.RunGui();
            }
              GifMaker gm_Cell_vis = new GifMaker(projPath.concat("/").concat("CellVid").concat(".gif"), 100, true);
            // GRID
            Rand runRNG = new Rand(run);
            gridLattice g = new gridLattice(xDim, yDim, path_to_output_file, runRNG, run);
            // TIME LOOP
            for (int i = 0; i < TIMESTEPS; i++) {
                timeStep = i;
                g.TCE_ON = false;
                for (int k = 0; k < g.TCE_start.length; k++) {
                    if (day >= g.TCE_start[k] && day <= g.TCE_start[k] + g.TCE_Duration[k] - 1) {
                        g.TCE_ON = true;
                    }
                }

                if (VISUALS) {
                    win.TickPause(100); //slows or speeds up the video frame rate
                }
                // COUNT CURRENT POPULATION
                double[] cell_count = g.CellCounts();

                g.ModelStep(timeStep, day);
                // GRAPHICAL OUTPUT
                if (VISUALS) {
                    g.Draw(Cell_vis);
                }
                // OTHER OUTPUT
                if (i % 24.0 == 0) {
                    System.out.println("Day " + day);
                    g.RecordOut(g.output, (int) day, cell_count, g.TCE_ON);

                    day += 1;

                    //System.out.println("TCE_start.length: " + g.TCE_start.length);
                    if (g.TCE_ON == true) {
                        System.out.println("TCE_ON = true");
                    }
                    if (g.TCE_ON == false) {
                        System.out.println("TCE_ON = false");
                    }
                }
            }
            g.output.Close();
            if (VISUALS) {
                win.Close();
                gm_Cell_vis.Close();
            }
        }
    }
}

//////////////
//CELL CLASS//
//////////////
class agentLattice extends AgentSQ2Dunstackable<gridLattice> {
    public int type; // type of cell
    int color; // color of each cell for visualization
    double pd_1 = 0; // pd_1 for tcells
    double tcellKills = 0; // Track T cell kills per step
    double tcellAge = 0; // used for tracking the age of a tcell
    double hours_since_kill = 0; // hours since a tcell last killed a tumor cell
    public double hours_since_activation = 0;
    public double hours_since_division = 0;

    ////////////////
    //CELL METHODS//
    ////////////////
    final public static int tcell = RGB256(10, 200, 150); //tcell color
    final public static int exhausted = RGB256(200, 50, 250); //exhausted tcell color
    final public static int cancer = RGB256(47, 32, 66); // tumor cell color
    final public static int inactivetcell = RGB256(255, 165, 0);
//    final public static int treg = RGB256(128, 0, 32);
    //final public static int pd_l1_tumor = RGB256(128, 128, 128); // Red for PD-L1+ tumors

    public static int CategorialColor(int index) {
        switch (index) {
            case activeTcell:
                return tcell;
            case exhaustedTcells:
                return exhausted;
            case Tumor:
                return cancer;
            case inactiveTcell:
                return inactivetcell;
//      case Tregs:
//          return treg;
            default:
                throw new IllegalArgumentException("index outside color category range index: " + index);
        }
    }

    void SetCellColor() {
        color = CategorialColor((int) Math.round(0 + type));
    }

    void Tcell_Kill() {
        if (type == Tumor) {
            if (G.totalTumorCells > 0) { // Prevent negative count
                G.totalTumorCells--;
            }
        }
        G.tumorKillsToday++;
        this.Dispose();
    }


    void CellStep() {
        if (type == inactiveTcell) {
            boolean agedDeath = false; // Track if the T cell is aged and should die
            this.tcellAge += 1;

            if (G.TCE_ON) {
                this.type = activeTcell;
                this.hours_since_activation = 0;
                this.SetCellColor(); // Update cell color after type change
            }
            for (int run = 0; run < 3; run++) {
                int[] movdivHood = MooreHood(true); // for division and movement
                int options = MapOccupiedHood(movdivHood); // mapping occupied spots
                int emptyNeighbors = MapEmptyHood(movdivHood); // mapping empty spots
                if (emptyNeighbors > 0) {
                    int chosenIndex = G.rn.Int(emptyNeighbors); // Randomly choose an empty cell index
                    int chosenCell = movdivHood[chosenIndex]; // Get the chosen empty cell
                    if (G.GetAgent(chosenCell) == null) { // Check if the chosen cell is still empty
                        MoveSQ(chosenCell);
                    }
                }
                if (agedDeath) {
                    break;
                }
            }
        }
        if (type == exhaustedTcells) {
            double rn_BirthDeath = G.rn.Double();
            double deathRate = G.T_CELL_DEATH_RATE;
            double deathProb = ProbScale(deathRate, 1);  // Calculate probability


            if (rn_BirthDeath < deathProb) {  // Check if cell should die
                this.Dispose();
                return;
            }

            this.SetCellColor();
            int[] movdivHood = MooreHood(true); // for division and movement
            int emptyNeighbors = MapEmptyHood(movdivHood); // mapping empty spots
            if (emptyNeighbors > 0) {
                int chosenIndex = G.rn.Int(emptyNeighbors); // Randomly choose an empty cell index
                int chosenCell = movdivHood[chosenIndex]; // Get the chosen empty cell
                if (G.GetAgent(chosenCell) == null) { // Check if the chosen cell is still empty
                    MoveSQ(chosenCell);
                }
            }
            //Define the percentage of cells to turn into active T cells
            double activationProbability = 0.0005; // For example, 30% chance
            if (G.TCE_ON) {
                // Generate a random number between 0 and 1
                double randomNumber = Math.random();
                // Only turn into activeTcell if the random number is less than the activationProbability
                if (randomNumber < activationProbability) {
                    this.type = activeTcell;
                    this.SetCellColor(); // Update cell color after type change
                    this.pd_1 = 0.25;
                }
            }
        }

        if (type == activeTcell) {
            if (G.TCE_ON) {
                this.hours_since_activation = 0;
            } else {
                this.hours_since_activation += 1;
            }
            // Increment T cell age and hours since last kill every hour
            this.tcellAge += 1;
            this.hours_since_kill += 1;
            this.hours_since_division += 1;

            for (int run = 0; run < 3; run++) {
                int[] movdivHood = MooreHood(true); // For division and movement
                int options = MapOccupiedHood(movdivHood); // Mapping occupied spots
                int emptyNeighbors = MapEmptyHood(movdivHood); // Mapping empty spots

                boolean hasKilled = false;
                for (int j = 0; j < options; j++) {
                    agentLattice target = G.GetAgent(movdivHood[j]); // Store reference

                    if (target != null && target.type == Tumor && this.hours_since_kill >= 12) {
                        boolean canKill = false;

                        // 5% chance to kill tumor cells
                        if (G.rn.Double() < 0.03) {
                            canKill = true;
                        }

                        if (canKill) {
                            target.Tcell_Kill();
                            this.tcellKills += 1;
                            this.hours_since_kill = 0;

                            if (G.TCE_ON) {
                                this.pd_1 += 1.0;
                            } else {
                                this.pd_1 += 0.5;
                            }
                            if (emptyNeighbors > 0 && this.hours_since_division >= 5) {//SENSITIVITY ANALYSIS range 5-28h (paper: "Heritable changes in division speed accompany the diversification of single T cell fate")
                                double divProbScale = 0.35 * (Math.max(0.0, 1.0 - (this.G.cached_CD8_TIL_count / (this.G.xDim * this.G.yDim))));

                                if (G.rn.Double() < divProbScale) {
                                    for (int i = 0; i < emptyNeighbors; i++) {
                                        int chosenIndex = G.rn.Int(emptyNeighbors); // Randomly choose an empty cell index
                                        int chosenCell = movdivHood[chosenIndex];
//                                    Get the chosen empty cell
                                        if (G.GetAgent(chosenCell) == null) {
                                            // Check if the chosen cell is still empty
                                            agentLattice child = G.NewAgentSQ(chosenCell);
                                            child.type = activeTcell;
                                            child.SetCellColor();
                                            child.tcellAge = 0;
                                            child.pd_1 = this.pd_1;
                                            child.hours_since_division = 0;
                                            this.hours_since_division = 0;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        hasKilled = true;
                        break; // stop after successful kill
                    }
                }
                //if nothing was killed, attmept to move
                if (!hasKilled && emptyNeighbors > 0) {
                    int chosenIndex = G.rn.Int(emptyNeighbors); // Randomly choose an empty cell index
                    int chosenCell = movdivHood[chosenIndex]; // Get the chosen empty cell
                    if (G.GetAgent(chosenCell) == null) { // Check if the chosen cell is still empty
                        MoveSQ(chosenCell);
                    }
                }
                // Probabilistic exhaustion transition based on PD-1
                double exhaustionProb = 1.0 / (1.0 + Math.exp(-1.8 * (this.pd_1 - 11.0))); // midpoint = 13.0, slope = 1.5
                if (G.rn.Double() < exhaustionProb) {
                    this.type = exhaustedTcells;
                    this.SetCellColor();
                    break;
                }

            }
        }


        if (type == Tumor) {
            // Default tumor death probability (without chemo)
            double adjusted_death_prob = G.Tumor_DEATH_PROB;
            double adjusted_prolif_prob = G.Tumor_PROLIFERATION_PROB;


            if (G.rn.Double() < ProbScale(adjusted_death_prob,1)) {
                if (G.totalTumorCells > 0) { // Prevents decrementing below 0
                    G.totalTumorCells--;
                }
                Dispose();
                return;
            }
            //STEP 2: division
            if (G.rn.Double() < ProbScale(adjusted_prolif_prob, 1)) {
                int[] divHood = MooreHood(true);
                int emptyNeighbors = MapEmptyHood(divHood);
                //Create new Agent
                if (emptyNeighbors > 0) {
                    agentLattice child = G.NewAgentSQ(divHood[G.rn.Int(emptyNeighbors)]);
                    child.type = this.type;
                    child.SetCellColor();
                }
            }
        }

//        if (type == PD_L1_Tumor) {
//            // Default tumor death probability (without chemo)
//            double adjusted_death_prob_2 = G.Tumor_DEATH_PROB;
//            double adjusted_prolif_prob_2 = G.Tumor_PROLIFERATION_PROB;
//
////            if (G.chemo_on || this.G.chemo_effect_remaining > 0) {
////                // Ensure that after 48 hours, viability is 33%
////                double target_survival_24h = 0.33; // 33% of tumor cells survive after 48h
////                adjusted_death_prob_2 = 1 - Math.pow(target_survival_24h, 1.0 / 48); // Calculate correct hourly death probability
////
////                // Reduce tumor proliferation (e.g., slow division by 50%)
////                adjusted_prolif_prob_2 *= 0.0;
////            }
//
//            if (G.rn.Double() < ProbScale(adjusted_death_prob_2,1)) {
//                if (G.totalPDL1TumorCells > 0) { // Prevents decrementing below 0
//                    G.totalPDL1TumorCells--;
//                }
//                Dispose();
//                return;
//            }
//
//            //STEP 2: division
//            if (G.rn.Double() < ProbScale(adjusted_prolif_prob_2, 1)) {
//                int[] divHood = MooreHood(true);
//                int emptyNeighbors = MapEmptyHood(divHood);
//                //Create new Agent
//                if (emptyNeighbors > 0) {
//                    agentLattice child = G.NewAgentSQ(divHood[G.rn.Int(emptyNeighbors)]);
//                    child.type = this.type;
//                    child.SetCellColor();
//                }
//            }
//        }
    }
}
